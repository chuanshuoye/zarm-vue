(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{410:function(s,a,n){"use strict";n.r(a);var t=n(1);const l={class:"zarm-vue-demo"},e={class:"za-panel"},p=Object(t.createVNode)("div",{class:"za-panel__header"},[Object(t.createVNode)("div",{class:"za-panel__title"},"上拉加载下拉刷新 ")],-1),c={class:"za-panel__body"},r=Object(t.createVNode)("img",{src:"https://static.zhongan.com/website/health/zarm/images/icons/state.png",alt:""},null,-1),h=Object(t.createVNode)("div",{class:"custom-control"}," 释放加载 ",-1),o={class:"custom-control"},j=Object(t.createVNode)("div",{class:"custom-control"}," 加载成功 ",-1),i={class:"zarm-markdown-doc"},d=Object(t.createVNode)("h2",null,"上拉加载下拉刷新 Pull",-1),g={class:"demo custom-block"},u=Object(t.createVNode)("p",{class:"custom-block-title"},"上拉加载下拉刷新",-1),m={class:"hljs"},f=Object(t.createStaticVNode)('<span class="hljs-tag">&lt;<span class="hljs-name">za-pull</span> <span class="hljs-attr">:on-refresh</span>=<span class="hljs-string">&quot;refresh(2)&quot;</span> <span class="hljs-attr">:refreshing</span>=<span class="hljs-string">&quot;refreshing2&quot;</span> <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">:on-load</span>=<span class="hljs-string">&quot;loadData&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">za-cell</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(i, index) in myData2&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>',3),y=Object(t.createStaticVNode)('<span class="hljs-tag">&lt;/<span class="hljs-name">za-cell</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- 此处的几个slot用来覆盖默认样式，定义的会覆盖，不定义的依然使用默认样式 --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:refreshPull</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-control&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{\n          transform: `scale(${props.percent / 100})`\n          }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.zhongan.com/website/health/zarm/images/icons/state.png&quot;</span> <span class="hljs-attr">alt</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:refreshDrop</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-control&quot;</span>&gt;</span>\n      释放加载\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:refreshLoading</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-control&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">za-activity-indicator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rotate360&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">za-activity-indicator</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:refreshSuccess</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-control&quot;</span>&gt;</span>\n      加载成功\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">za-pull</span>&gt;</span>\n',43),b=Object(t.createStaticVNode)("<h4>上拉加载下拉刷新(自定义提示内容)</h4><p>使用 scopedSlots 来覆盖默认的样式</p><p>上拉刷新的几个状态分别为 <code>refreshPull</code>, <code>refreshDrop</code>, <code>refreshLoading</code>, <code>refreshSuccess</code>, <code>refreshFailure</code> 分别对应各自的 scopedSlots。</p><p>下拉加载的几个状态分别为 <code>loadComplete</code>, <code>loadLoading</code>, <code>loadFailure</code> 分别对应各自的 scopedSlots。</p><p>scopedSlots 用来覆盖默认样式，定义的会覆盖，不定义的默认使用内定样式</p>",5),w={class:"hljs"},q=Object(t.createStaticVNode)('<span class="hljs-tag">&lt;<span class="hljs-name">za-panel-body</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">za-pull</span> <span class="hljs-attr">:on-refresh</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">:refreshing</span>=<span class="hljs-string">&quot;refreshing&quot;</span> <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">:on-load</span>=<span class="hljs-string">&quot;loadData&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">za-cell</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in myData&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span>',5),v=Object(t.createStaticVNode)('<span class="hljs-tag">&lt;/<span class="hljs-name">za-cell</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:refreshPull</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-control&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{\n        transform: `scale(${props.percent / 100})`\n        }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:24px;height:24px&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.zhongan.com/website/health/zarm/images/icons/state.png&quot;</span> <span class="hljs-attr">alt</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:refreshDrop</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-control&quot;</span>&gt;</span>\n        释放加载\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:refreshLoading</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-control&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">za-activity-indicator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rotate360&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">za-activity-indicator</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:refreshSuccess</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-control&quot;</span>&gt;</span>\n        加载成功\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">za-pull</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">za-panel-body</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">myData</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],\n        <span class="hljs-attr">refreshing</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      random(length) {\n        <span class="hljs-keyword">const</span> newData = []\n        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) {\n          newData.push(<span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>))\n        }\n        <span class="hljs-keyword">return</span> newData\n      },\n      refresh() {\n        <span class="hljs-keyword">this</span>.refreshing = <span class="hljs-literal">true</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n          fetch()\n            .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> {\n              <span class="hljs-keyword">this</span>.refreshing = <span class="hljs-literal">false</span>\n              resolve(<span class="hljs-literal">true</span>)\n            })\n            .catch(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> {\n              <span class="hljs-keyword">this</span>.refreshing = <span class="hljs-literal">false</span>\n              reject(<span class="hljs-literal">false</span>)\n            })\n        })\n      },\n      loadData() {\n        <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">true</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n          fetch()\n            .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> {\n              <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span>\n              resolve(<span class="hljs-literal">true</span>)\n              <span class="hljs-comment">// or resolve(false);</span>\n            })\n            .catch(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> {\n              <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span>\n              reject(<span class="hljs-literal">false</span>)\n            })\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n',47),x=Object(t.createStaticVNode)('<p>on-refresh, on-load 这两个回调函数要求返回一个 Promise 对象。对于 on-refresh 来说，resolve 时表示刷新成功，reject 则表示刷新失败。而对于 on-load 来说，resolve(true) 表示加载成功，并且还有更多数据，resolve(false) 表示加载成功，但后续没有数据了。reject 则表示加载失败。</p><p><strong>注意: zarm-vue 本身并不带有 Promise 库，请您根据自己的运行环境决定是否需要用引入 Promise Pollyfill.</strong></p><h3>Vue Script</h3><pre class="hljs"><code>&lt;script name=<span class="hljs-string">&quot;vue&quot;</span>&gt;\n<span class="hljs-keyword">let</span> times = <span class="hljs-number">0</span>;\n<span class="hljs-keyword">let</span> RandomLength = <span class="hljs-number">25</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  mounted() {\n    <span class="hljs-keyword">this</span>.refreshing2 = <span class="hljs-literal">true</span>\n    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n      <span class="hljs-keyword">this</span>.myData2 = <span class="hljs-keyword">this</span>.random(RandomLength);\n      <span class="hljs-keyword">this</span>.refreshing2 = <span class="hljs-literal">false</span>\n    }, <span class="hljs-number">1500</span>)\n  },\n  data() {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">i</span>: <span class="hljs-literal">null</span>,\n      <span class="hljs-attr">myData2</span>: [],\n      <span class="hljs-attr">refreshing1</span>: <span class="hljs-literal">false</span>,\n      <span class="hljs-attr">refreshing2</span>: <span class="hljs-literal">false</span>,\n      <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span>,\n    }\n  },\n  <span class="hljs-attr">methods</span>: {\n    random(length){\n      <span class="hljs-keyword">const</span> newData = [];\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++){\n        newData.push(<span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>))\n      }\n      <span class="hljs-keyword">return</span> newData;\n    },\n    refresh(index) {\n      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n        <span class="hljs-keyword">this</span>[<span class="hljs-string">`refreshing<span class="hljs-subst">${index}</span>`</span>] = <span class="hljs-literal">true</span>;\n        setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          <span class="hljs-keyword">this</span>[<span class="hljs-string">`myData<span class="hljs-subst">${index}</span>`</span>] = <span class="hljs-keyword">this</span>.random(RandomLength);\n          resolve(<span class="hljs-literal">true</span>);\n          <span class="hljs-keyword">this</span>[<span class="hljs-string">`refreshing<span class="hljs-subst">${index}</span>`</span>] = <span class="hljs-literal">false</span>;\n        }, <span class="hljs-number">1000</span>)\n      })\n    },\n    loadData() {\n      <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">true</span>\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n        setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &gt; <span class="hljs-number">0.8</span>) {\n            <span class="hljs-keyword">return</span> reject(<span class="hljs-literal">false</span>); <span class="hljs-comment">// capture error and reject it</span>\n          };\n          <span class="hljs-keyword">if</span>(times &lt; <span class="hljs-number">2</span>){\n            <span class="hljs-keyword">const</span> length = <span class="hljs-keyword">this</span>.myData2.length + <span class="hljs-number">1</span>\n            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {\n              <span class="hljs-keyword">this</span>.myData2.push( length + i);\n            }\n            resolve(<span class="hljs-literal">true</span>) <span class="hljs-comment">// has more</span>\n          }<span class="hljs-keyword">else</span>{\n            resolve(<span class="hljs-literal">false</span>) <span class="hljs-comment">// no more</span>\n          }\n          <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span>\n          times++;\n        }, <span class="hljs-number">1200</span>)\n      })\n    }\n  }\n}\n&lt;<span class="hljs-regexp">/script&gt;\n</span></code></pre><h3>API</h3><h4>Pull Attributes</h4><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选值／参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">refreshing</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">是否正在刷新</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">loading</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">是否正在加载</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">refresh-init-distance</td><td style="text-align:left;">number</td><td style="text-align:left;">20</td><td style="text-align:left;"></td><td style="text-align:left;">下拉助跑距离</td></tr><tr><td style="text-align:left;">refresh-distance</td><td style="text-align:left;">number</td><td style="text-align:left;">60</td><td style="text-align:left;"></td><td style="text-align:left;">下拉距离阀值</td></tr><tr><td style="text-align:left;">duration</td><td style="text-align:left;">number</td><td style="text-align:left;">300</td><td style="text-align:left;"></td><td style="text-align:left;">动画执行时间，单位：ms</td></tr><tr><td style="text-align:left;">stay-time</td><td style="text-align:left;">number</td><td style="text-align:left;">1500</td><td style="text-align:left;"></td><td style="text-align:left;">加载成功停留时间</td></tr><tr><td style="text-align:left;">on-refresh</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">达到阀值后释放触发刷新的回调函数</td></tr><tr><td style="text-align:left;">on-load</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">下拉加载的回调函数</td></tr></tbody></table>',7);let k=0;var O={mounted(){this.refreshing2=!0,setTimeout(()=>{this.myData2=this.random(25),this.refreshing2=!1},1500)},data:()=>({i:null,myData2:[],refreshing1:!1,refreshing2:!1,loading:!1}),methods:{random(s){const a=[];for(let n=0;n<s;n++)a.push(Math.round(100*Math.random()));return a},refresh(s){return()=>new Promise((a,n)=>{this["refreshing"+s]=!0,setTimeout(()=>{this["myData"+s]=this.random(25),a(!0),this["refreshing"+s]=!1},1e3)})},loadData(){return this.loading=!0,new Promise((s,a)=>{setTimeout(()=>{if(Math.random()>.8)return a(!1);if(k<2){const a=this.myData2.length+1;for(let s=0;s<10;s++)this.myData2.push(a+s);s(!0)}else s(!1);this.loading=!1,k++},1200)})}},render:function(s,a,n,k,O,D){const z=Object(t.resolveComponent)("za-cell"),V=Object(t.resolveComponent)("za-activity-indicator"),N=Object(t.resolveComponent)("za-pull");return Object(t.openBlock)(),Object(t.createBlock)("div",null,[Object(t.createVNode)("div",l,[Object(t.createVNode)("div",e,[p,Object(t.createVNode)("div",c,[Object(t.createVNode)(N,{"on-refresh":D.refresh(2),refreshing:O.refreshing2,loading:O.loading,"on-load":D.loadData},{refreshPull:Object(t.withCtx)(s=>[Object(t.createVNode)("div",{class:"custom-control",style:{transform:`scale(${s.percent/100})`}},[r],4)]),refreshDrop:Object(t.withCtx)(s=>[h]),refreshLoading:Object(t.withCtx)(s=>[Object(t.createVNode)("div",o,[Object(t.createVNode)(V,{class:"rotate360"})])]),refreshSuccess:Object(t.withCtx)(s=>[j]),default:Object(t.withCtx)(()=>[(Object(t.openBlock)(!0),Object(t.createBlock)(t.Fragment,null,Object(t.renderList)(O.myData2,(s,a)=>(Object(t.openBlock)(),Object(t.createBlock)(z,{key:a},{default:Object(t.withCtx)(()=>[Object(t.createTextVNode)("ID号 "+Object(t.toDisplayString)(s),1)]),_:2},1024))),128))]),_:1},8,["on-refresh","refreshing","loading","on-load"])])])]),Object(t.createVNode)("div",i,[d,Object(t.createVNode)("div",g,[u,Object(t.createVNode)("pre",m,[Object(t.createVNode)("code",null,[f,Object(t.createTextVNode)("ID号 "+Object(t.toDisplayString)(O.i)+" ",1),y])])]),b,Object(t.createVNode)("pre",w,[Object(t.createVNode)("code",null,[q,Object(t.createTextVNode)("第 "+Object(t.toDisplayString)(O.i)+" 行",1),v])]),x])])}};a.default=O}}]);