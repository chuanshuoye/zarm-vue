(window.webpackJsonp=window.webpackJsonp||[]).push([[76,91],{554:function(s,t,a){"use strict";a.r(t);var e=a(0);const l={class:"zarm-vue-demo"},n={class:"za-panel"},c=Object(e.i)("div",{class:"za-panel__header"},[Object(e.i)("div",{class:"za-panel__title"},"平铺键盘 Keyboard ")],-1),p={class:"za-panel__body"},i={class:"za-panel"},d=Object(e.i)("div",{class:"za-panel__header"},[Object(e.i)("div",{class:"za-panel__title"},"键盘触发器 KeyboardPicker ")],-1),r={class:"za-panel__body"},h=Object(e.h)("开启"),o=Object(e.g)('<div class="zarm-markdown-doc"><h2>虚拟键盘 Keyboard &amp; KeyboardPicker</h2><div class="demo custom-block"><p class="custom-block-title">平铺键盘 Keyboard</p><pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">za-keyboard</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">za-keyboard</span>&gt;</span>\n</code></pre></div><div class="demo custom-block"><p class="custom-block-title">键盘触发器 KeyboardPicker</p><pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">za-cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;拾取器触发&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:description</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">za-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;xs&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;visible1 = true&quot;</span>&gt;</span>开启<span class="hljs-tag">&lt;/<span class="hljs-name">za-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">za-cell</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">za-keyboard-picker</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;visible1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> @<span class="hljs-attr">keyClick</span>=<span class="hljs-string">&quot;handleChange1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">za-keyboard-picker</span>&gt;</span>\n</code></pre></div><h3>Vue Script</h3><pre class="hljs"><code>&lt;script name=<span class="hljs-string">&quot;vue&quot;</span>&gt;\n<span class="hljs-keyword">const</span> getValue = <span class="hljs-function">(<span class="hljs-params">v, key</span>) =&gt;</span> {\n  <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#39;delete&#39;</span>) {\n    <span class="hljs-keyword">return</span> v.slice(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>)\n  }\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${v}</span><span class="hljs-subst">${key}</span>`</span>\n}\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data() {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">v1</span>:<span class="hljs-string">&#39;&#39;</span>,\n      <span class="hljs-attr">visible1</span>: <span class="hljs-literal">false</span>,\n    }\n  },\n  <span class="hljs-attr">methods</span>: {\n    handleChange1(key) {\n      <span class="hljs-keyword">if</span> ([<span class="hljs-string">&#39;close&#39;</span>, <span class="hljs-string">&#39;ok&#39;</span>].indexOf(key) &gt; <span class="hljs-number">-1</span>) {\n        <span class="hljs-keyword">return</span>;\n      }\n      <span class="hljs-keyword">this</span>.v1 = getValue(<span class="hljs-keyword">this</span>.v1, key)\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.v1);\n    },\n  },\n};\n&lt;<span class="hljs-regexp">/script&gt;\n</span></code></pre><h3>API</h3><h4>keyboard Attributes</h4><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选值／参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">type</td><td style="text-align:left;">string</td><td style="text-align:left;">&#39;number&#39;</td><td style="text-align:left;"></td><td style="text-align:left;">键盘类型，可选<code>number</code>,<code>price</code>,<code>idcard</code></td></tr></tbody></table><h4>keyboardPicker Attributes</h4><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选值／参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">visible</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td><td style="text-align:left;"></td><td style="text-align:left;">是否显示, 支持.sync 修饰符 (v2.3.0+)</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">string</td><td style="text-align:left;">&#39;number&#39;</td><td style="text-align:left;"></td><td style="text-align:left;">键盘类型，可选<code>number</code>,<code>price</code>,<code>idcard</code></td></tr></tbody></table><h4>keyboard &amp; keyboardPicker Events</h4><table><thead><tr><th style="text-align:left;">事件名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">回调参数</th></tr></thead><tbody><tr><td style="text-align:left;">key-click</td><td style="text-align:left;">当点击键盘时触发的事件</td><td style="text-align:left;">最新点击的值</td></tr></tbody></table></div>',1);var j={data:()=>({v1:"",visible1:!1}),methods:{handleChange1(s){["close","ok"].indexOf(s)>-1||(this.v1=((s,t)=>"delete"==t?s.slice(0,-1):`${s}${t}`)(this.v1,s),console.log(this.v1))}},render:function(s,t,a,j,b,y){const g=Object(e.B)("za-keyboard"),u=Object(e.B)("za-button"),k=Object(e.B)("za-cell"),f=Object(e.B)("za-keyboard-picker");return Object(e.t)(),Object(e.e)("div",null,[Object(e.i)("div",l,[Object(e.i)("div",n,[c,Object(e.i)("div",p,[Object(e.i)(g,{type:"number"})])]),Object(e.i)("div",i,[d,Object(e.i)("div",r,[Object(e.i)(k,{title:"拾取器触发"},{description:Object(e.K)(()=>[Object(e.i)(u,{size:"xs",onClick:t[1]||(t[1]=s=>b.visible1=!0)},{default:Object(e.K)(()=>[h]),_:1})]),_:1}),Object(e.i)(f,{visible:b.visible1,type:"number",onKeyClick:y.handleChange1},null,8,["visible","onKeyClick"])])])]),o])}};t.default=j},675:function(s,t,a){"use strict";a.r(t);var e=a(0);var l=a(554),n=a(273),c=a(274),p=a(275),i={components:{Container:n.a,PageHeader:c.a,PageFooter:p.a,Demo:l.default},render:function(s,t,a,l,n,c){const p=Object(e.B)("PageHeader"),i=Object(e.B)("Demo"),d=Object(e.B)("PageFooter"),r=Object(e.B)("Container");return Object(e.t)(),Object(e.e)(r,null,{default:Object(e.K)(()=>[Object(e.i)(p,{title:"虚拟键盘 Keyboard & KeyboardPicker"}),Object(e.i)(i),Object(e.i)(d)]),_:1})}};t.default=i}}]);